generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  createInputTypes                 = false
  createOptionalDefaultValuesTypes = true
  createRelationValuesTypes        = false
  writeNullishInModelTypes         = true
  addInputTypeValidation           = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  email        String      @unique
  name         String
  username     String      @unique
  password     String
  role         String      @default("STOCK_MANAGER") // STOCK_MANAGER | ADMIN
  products     Product[]
  inventoryIDs String[]    @default([]) @db.ObjectId
  inventories  Inventory[] @relation(fields: [inventoryIDs], references: [id])
}

model Inventory {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  userIDs   String[]  @default([]) @db.ObjectId
  users     User[]    @relation(fields: [userIDs], references: [id])
}

model ProductAttribute {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  label        String
  type         String
  templatesIDs String[]          @db.ObjectId
  templates    ProductTemplate[] @relation(fields: [templatesIDs], references: [id])
}

model ProductTemplate {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  commonAttributes    String[]           @default(["description", "price", "quantity", "attributes", "image", "categories"])
  productAttributeIDs String[]           @db.ObjectId
  specificAttributes  ProductAttribute[] @relation(fields: [productAttributeIDs], references: [id])
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  products            Product[]
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?   @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  productIDs  String[]  @default([]) @db.ObjectId
  products    Product[] @relation(fields: [productIDs], references: [id])
}

model Product {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  /// @zod.string.min(3, { message: "O nome precisa ter 3 ou mais letras" })
  name              String
  description       String?          @default("")
  price             Float?           @default(0.0)
  sku               String?          @default("")
  quantity          Int?             @default(0)
  categoryIDs       String[]         @default([]) @db.ObjectId
  categories        Category[]       @relation(fields: [categoryIDs], references: [id])
  // attributes        Json? 
  imageUrl          String?          @default("")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  User              User             @relation(fields: [userId], references: [id])
  userId            String           @default("") @db.ObjectId
  Inventory         Inventory        @relation(fields: [inventoryId], references: [id])
  inventoryId       String           @default("") @db.ObjectId
  ProductTemplate   ProductTemplate? @relation(fields: [productTemplateId], references: [id])
  productTemplateId String?          @db.ObjectId
}
